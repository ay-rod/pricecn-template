{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "pricing-table-classic",
  "type": "registry:component",
  "title": "Pricing Table",
  "description": "A pricing table component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "switch"
  ],
  "files": [
    {
      "path": "registry/classic/pricing-table.tsx",
      "content": "\"use client\";\n\nimport { createContext, useContext, useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\nimport { products as defaultProducts } from \"./pricecn.config\";\nimport { cva } from \"class-variance-authority\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Button } from \"@/components/ui/button\";\nimport React from \"react\";\nimport { Check, Loader2 } from \"lucide-react\";\n\ninterface PricingTableContextType {\n  isAnnual: boolean;\n  setIsAnnual: (isAnnual: boolean) => void;\n  variant: \"classic\" | \"clean\";\n  products: typeof defaultProducts;\n}\n\nconst PricingTableContext = createContext<PricingTableContextType>({\n  isAnnual: false,\n  setIsAnnual: () => {},\n  variant: \"classic\",\n  products: defaultProducts,\n});\n\nconst pricingTableVariant = cva(\n  \"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-none lg:auto-cols-[minmax(200px,1fr)] lg:grid-flow-col\",\n  {\n    variants: {\n      variant: {\n        classic:\n          \"bg-white rounded-xl border overflow-hidden lg:overflow-visible dark:shadow-zinc-800 shadow-inner bg-gradient-to-br from-stone-100 to-background dark:from-background/95 dark:to-background\",\n        clean: \"gap-4\",\n      },\n    },\n  }\n);\n\nexport const usePricingTableContext = (componentName: string) => {\n  const context = useContext(PricingTableContext);\n\n  if (context === undefined) {\n    throw new Error(`${componentName} must be used within <PricingTable />`);\n  }\n\n  return context;\n};\n\nexport const PricingTable = ({\n  children,\n  className,\n  variant = \"classic\",\n  products = defaultProducts,\n}: {\n  children: React.ReactNode;\n  className?: string;\n  variant?: \"classic\" | \"clean\";\n  products?: typeof defaultProducts;\n}) => {\n  const [isAnnual, setIsAnnual] = useState(false);\n\n  return (\n    <PricingTableContext.Provider\n      value={{\n        isAnnual,\n        setIsAnnual,\n        variant,\n        products: products || defaultProducts || [],\n      }}\n    >\n      <div className={cn(\"flex items-center flex-col\")}>\n        {products.some((p) => p.priceAnnual) && (\n          <div className={cn(products.some((p) => p.recommendText) && \"mb-8\")}>\n            <AnnualSwitch isAnnual={isAnnual} setIsAnnual={setIsAnnual} />\n          </div>\n        )}\n        <div className={cn(pricingTableVariant({ variant }), className)}>\n          {children}\n        </div>\n      </div>\n    </PricingTableContext.Provider>\n  );\n};\n\ninterface PricingCardProps {\n  productId: string;\n  showFeatures?: boolean;\n  className?: string;\n  onButtonClick?: (event: React.MouseEvent<HTMLButtonElement>) => void;\n}\n\nconst pricingCardVariants = cva(\"w-full h-full py-6 text-foreground\", {\n  variants: {\n    variant: {\n      classic:\n        \"border-l border-t lg:border-t-0 lg:first:border-l-0 lg:ml-0 ml-[-1px] -mt-[1px]\",\n      clean: \"border rounded-md bg-background\",\n    },\n    recommended: {\n      classic:\n        \"lg:border-none lg:outline lg:outline-1 lg:outline-border lg:-translate-y-6 lg:rounded-xl lg:shadow-xl lg:shadow-zinc-200 lg:dark:shadow-zinc-800 lg:h-[calc(100%+48px)] bg-stone-100 dark:bg-zinc-900\",\n      clean: \"border bg-secondary shadow-xl border-primary/30\",\n    },\n  },\n});\n\nexport const PricingCard = ({\n  productId,\n  showFeatures,\n  className,\n  onButtonClick,\n}: PricingCardProps) => {\n  const { isAnnual, products, variant } =\n    usePricingTableContext(\"PricingCardclassic\");\n  const product = products.find((p) => p.id === productId);\n  if (!product) {\n    throw new Error(`Product with id ${productId} not found`);\n  }\n\n  const {\n    name,\n    price,\n    priceAnnual,\n    recommendText,\n    buttonText,\n    items,\n    description,\n  } = product;\n\n  return (\n    <div\n      className={cn(\n        pricingCardVariants({\n          variant,\n          recommended: recommendText ? variant : null,\n        }),\n        className\n      )}\n    >\n      <div\n        className={cn(\n          \"flex flex-col h-full flex-grow\",\n          variant === \"classic\" && recommendText && \"lg:translate-y-6\"\n        )}\n      >\n        <div className=\"h-full\">\n          <div className=\"flex flex-col gap-2\">\n            <h2 className=\"text-2xl font-bold px-6 \">{name}</h2>\n            {description && (\n              <span className=\"text-sm text-muted-foreground px-6 h-12\">\n                {description}\n              </span>\n            )}\n            <div className=\"mt-2\">\n              <h3 className=\"font-semibold text-md h-16 border-y flex items-center px-6\">\n                <div>\n                  {isAnnual && priceAnnual\n                    ? priceAnnual?.primaryText\n                    : price.primaryText}{\" \"}\n                  {price.secondaryText && (\n                    <span className=\"font-normal text-muted-foreground mt-1\">\n                      {isAnnual && priceAnnual\n                        ? priceAnnual?.secondaryText\n                        : price.secondaryText}\n                    </span>\n                  )}\n                </div>\n              </h3>\n            </div>\n          </div>\n          {showFeatures && (\n            <div className=\"flex-grow px-6\">\n              <PricingFeatureList items={items} showIcon={true} />\n            </div>\n          )}\n        </div>\n        <div\n          className={cn(\n            \"mt-4 px-6 \",\n            variant === \"classic\" && recommendText && \"lg:-translate-y-12\"\n          )}\n        >\n          <PricingCardButton\n            recommended={recommendText ? true : false}\n            priceVariant=\"classic\"\n            onClick={onButtonClick}\n          >\n            {buttonText}\n          </PricingCardButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Pricing Feature List\nexport const PricingFeatureList = ({\n  items,\n  showIcon = true,\n  everythingFrom,\n  className,\n}: {\n  items: {\n    primaryText: string;\n    secondaryText?: string;\n  }[];\n  showIcon?: boolean;\n  everythingFrom?: string;\n  className?: string;\n}) => {\n  return (\n    <div className={cn(\"py-6 flex-grow\", className)}>\n      {everythingFrom && (\n        <p className=\"text-sm mb-4\">Everything from {everythingFrom}, plus:</p>\n      )}\n      <div className=\"space-y-3\">\n        {items.map((item, index) => (\n          <div key={index} className=\"flex items-start gap-2 text-sm\">\n            {showIcon && (\n              <Check className=\"h-4 w-4 text-primary flex-shrink-0 mt-0.5\" />\n            )}\n            <div className=\"flex flex-col\">\n              <span>{item.primaryText}</span>\n              {item.secondaryText && (\n                <span className=\"text-sm text-muted-foreground\">\n                  {item.secondaryText}\n                </span>\n              )}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\n// Pricing Card Button\nexport interface PricingCardButtonProps extends React.ComponentProps<\"button\"> {\n  recommended?: boolean;\n  priceVariant?: \"classic\";\n}\n\nexport const PricingCardButton = React.forwardRef<\n  HTMLButtonElement,\n  PricingCardButtonProps\n>(({ recommended, children, priceVariant, ...props }, ref) => {\n  const [loading, setLoading] = useState(false);\n  return (\n    <Button\n      className={cn(\n        \"w-full py-3 px-4 rounded-none group overflow-hidden relative transition-all duration-300 hover:brightness-90\",\n        priceVariant === \"classic\" && \"border rounded-lg\"\n      )}\n      variant={recommended ? \"default\" : \"secondary\"}\n      {...props}\n      ref={ref}\n      disabled={loading}\n      onClick={async (e) => {\n        setLoading(true);\n        await props.onClick?.(e);\n        setLoading(false);\n      }}\n    >\n      {loading ? (\n        <Loader2 className=\"h-4 w-4 animate-spin\" />\n      ) : (\n        <>\n          {\" \"}\n          <div className=\"flex items-center justify-between w-full transition-transform duration-300 group-hover:translate-y-[-130%]\">\n            <span>{children}</span>\n            <span className=\"text-sm\">→</span>\n          </div>\n          <div className=\"flex items-center justify-between w-full absolute px-4 translate-y-[130%] transition-transform duration-300 group-hover:translate-y-0 mt-2 group-hover:mt-0\">\n            <span>{children}</span>\n            <span className=\"text-sm\">→</span>\n          </div>\n        </>\n      )}\n    </Button>\n  );\n});\nPricingCardButton.displayName = \"PricingCardButton\";\n\n// Annual Switch\nexport const AnnualSwitch = ({\n  isAnnual,\n  setIsAnnual,\n}: {\n  isAnnual: boolean;\n  setIsAnnual: (isAnnual: boolean) => void;\n}) => {\n  return (\n    <div className=\"flex items-center space-x-2 mb-4\">\n      <span className=\"text-sm text-muted-foreground\">Monthly</span>\n      <Switch\n        id=\"annual-billing\"\n        checked={isAnnual}\n        onCheckedChange={setIsAnnual}\n      />\n      <span className=\"text-sm text-muted-foreground\">Annual</span>\n    </div>\n  );\n};\n\nexport const RecommendedBadge = ({ recommended }: { recommended: string }) => {\n  return (\n    <div\n      className={cn(\n        \"bg-primary absolute text-sm font-semibold flex items-center justify-center text-primary-foreground lg:-top-8 lg:left-0 lg:w-full lg:h-8 top-0 right-0 w-fit h-6 z-50 rounded-none px-2\"\n      )}\n    >\n      {recommended}\n    </div>\n  );\n};\n",
      "type": "registry:component"
    }
  ]
}