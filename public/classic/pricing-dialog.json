{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "classic/pricing-dialog",
  "type": "registry:component",
  "title": "Pricing Dialog",
  "description": "A pricing dialog component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "dialog"
  ],
  "files": [
    {
      "path": "registry/classic/pricing-dialog.tsx",
      "content": "import { cn } from \"@/lib/utils\";\nimport { Dialog, DialogContent, DialogFooter } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowRight } from \"lucide-react\";\nimport React from \"react\";\n\nexport const PricingDialog = ({\n  open,\n  setOpen,\n  children,\n  className,\n}: {\n  open: boolean;\n  setOpen: (open: boolean) => void;\n  children: React.ReactNode;\n  className?: string;\n}) => {\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogContent\n        className={cn(\n          className,\n          \"p-0 rounded-lg text-foreground gap-0 text-sm shadow-inner\"\n        )}\n      >\n        {children}\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport const PricingDialogTitle = ({\n  children,\n  className,\n}: {\n  children: React.ReactNode;\n  className?: string;\n}) => {\n  return (\n    <h2 className={cn(className, \"font-bold text-xl px-6 pt-4 pb-2\")}>\n      {children}\n    </h2>\n  );\n};\n\nexport const Information = ({\n  children,\n  className,\n}: {\n  children: React.ReactNode;\n  className?: string;\n}) => {\n  return (\n    <div\n      className={cn(\n        className,\n        \"text-foreground px-6 pb-3 text-sm whitespace-pre-line\"\n      )}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport const PriceItem = ({\n  children,\n  className,\n  ...props\n}: {\n  children: React.ReactNode;\n  className?: string;\n} & React.HTMLAttributes<HTMLDivElement>) => {\n  return (\n    <div\n      className={cn(\n        \"flex flex-col text-muted-foreground pb-4 sm:pb-0 gap-1 sm:flex-row justify-between px-6 sm:h-7 sm:gap-2 sm:items-center  sm:whitespace-nowrap \",\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport const QuantityInput = ({\n  children,\n  onChange,\n  value,\n  className,\n  ...props\n}: {\n  children: React.ReactNode;\n  value: string | number;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  className?: string;\n} & React.HTMLAttributes<HTMLDivElement>) => {\n  const currentValue = Number(value) || 0;\n\n  const handleValueChange = (newValue: number) => {\n    const syntheticEvent = {\n      target: { value: String(newValue) },\n    } as React.ChangeEvent<HTMLInputElement>;\n    onChange(syntheticEvent);\n  };\n\n  return (\n    <div\n      className={cn(className, \"flex flex-row items-center gap-4\")}\n      {...props}\n    >\n      <div className=\"flex items-center gap-1\">\n        <Button\n          variant=\"outline\"\n          size=\"icon\"\n          onClick={() =>\n            currentValue > 0 && handleValueChange(currentValue - 1)\n          }\n          disabled={currentValue <= 0}\n          className=\"h-6 w-6 pb-0.5\"\n        >\n          -\n        </Button>\n        <span className=\"w-8 text-center text-foreground\">{currentValue}</span>\n        <Button\n          variant=\"outline\"\n          size=\"icon\"\n          onClick={() => handleValueChange(currentValue + 1)}\n          className=\"h-6 w-6 pb-0.5\"\n        >\n          +\n        </Button>\n      </div>\n      {children}\n    </div>\n  );\n};\n\nexport const PricingDialogFooter = ({\n  children,\n  className,\n}: {\n  children: React.ReactNode;\n  className?: string;\n}) => {\n  return (\n    <DialogFooter\n      className={cn(\n        className,\n        \"flex flex-col sm:flex-row justify-between py-3 px-4 bg-stone-100 dark:bg-zinc-900 rounded-b-lg mt-4 border-t\"\n      )}\n    >\n      {children}\n    </DialogFooter>\n  );\n};\n\nexport const TotalPrice = ({ children }: { children: React.ReactNode }) => {\n  return (\n    <div className=\"px-2 w-full mb-4 sm:mb-0 font-semibold flex justify-between items-center\">\n      {children}\n    </div>\n  );\n};\n\nexport const PricingDialogButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ children, onClick, className, ...props }, ref) => {\n  return (\n    <Button\n      onClick={onClick}\n      {...props}\n      ref={ref}\n      className={cn(className, \"shadow-sm shadow-stone-400\")}\n    >\n      {children}\n      <ArrowRight className=\"!h-3\" />\n    </Button>\n  );\n});\nPricingDialogButton.displayName = \"PricingDialogButton\";\n",
      "type": "registry:component",
      "target": "components/pricing/pricing-dialog.tsx"
    },
    {
      "path": "registry/classic/example.tsx",
      "content": "\"use client\";\nimport { Button } from \"@/components/ui/button\";\nimport { PricingCard, PricingTable, Product } from \"./pricing-table\";\n\nexport const products: Product[] = [\n  {\n    id: \"hobby\",\n    name: \"Hobby\",\n    description: \"For personal projects and small-scale applications.\",\n    price: { primaryText: \"Free\", secondaryText: \"up to 3 users\" },\n    buttonText: \"Start deploying\",\n    items: [\n      {\n        primaryText: \"Deploy full-stack apps in minutes\",\n      },\n      {\n        primaryText: \"Fully-managed datastores\",\n      },\n      {\n        primaryText: \"Custom domains\",\n      },\n      {\n        primaryText: \"Global CDN & regional hosting\",\n      },\n      {\n        primaryText: \"Get security out of the box\",\n      },\n      {\n        primaryText: \"Email support\",\n      },\n    ],\n  },\n  {\n    id: \"professional\",\n    name: \"Pro\",\n    description: \"For teams building production applications.\",\n    recommendedText: \"Best Value\",\n    price: {\n      primaryText: \"$19\",\n      secondaryText: \"per user/month plus compute costs*\",\n    },\n    priceAnnual: {\n      primaryText: \"$190\",\n      secondaryText: \"per user/year plus compute costs*\",\n    },\n    buttonText: \"Select plan\",\n    everythingFrom: \"Hobby\",\n    items: [\n      {\n        primaryText: \"10 team members included\",\n        secondaryText: \"Then $20 per member\",\n      },\n      {\n        primaryText: \"500 GB of bandwidth included\",\n      },\n      {\n        primaryText: \"Unlimited projects & environments\",\n      },\n      {\n        primaryText: \"Horizontal autoscaling\",\n      },\n      {\n        primaryText: \"Test with preview environments\",\n      },\n      {\n        primaryText: \"Isolated environments\",\n      },\n    ],\n  },\n  {\n    id: \"enterprise\",\n    name: \"Enterprise\",\n    description: \"For mission critical applications with complex needs.\",\n    price: { primaryText: \"Custom\", secondaryText: \"pricing for your team\" },\n    buttonText: \"Get in touch\",\n    everythingFrom: \"Organization\",\n    items: [\n      {\n        primaryText: \"Centralized team management\",\n      },\n      {\n        primaryText: \"Guest users\",\n      },\n      {\n        primaryText: \"SAML SSO & SCIM\",\n      },\n      {\n        primaryText: \"Guaranteed uptime\",\n      },\n      {\n        primaryText: \"Premium support\",\n      },\n      {\n        primaryText: \"Customer success\",\n      },\n    ],\n  },\n];\n\nexport const PricingTableExample = () => {\n  return (\n    <div>\n      <Button\n        onClick={() => document.documentElement.classList.toggle(\"dark\")}\n        className=\"p-2 mb-4 rounded-lg text-zinc-600 dark:text-zinc-300 \n        bg-zinc-100 dark:bg-zinc-800 hover:bg-zinc-200 dark:hover:bg-zinc-700 transition-colors\"\n      >\n        Toggle theme\n      </Button>\n      <PricingTable products={products} showFeatures={true}>\n        <PricingCard productId=\"hobby\" />\n        <PricingCard productId=\"professional\" />\n        <PricingCard productId=\"enterprise\" />\n      </PricingTable>\n    </div>\n  );\n};\n",
      "type": "registry:component",
      "target": "components/pricing/example.tsx"
    }
  ]
}